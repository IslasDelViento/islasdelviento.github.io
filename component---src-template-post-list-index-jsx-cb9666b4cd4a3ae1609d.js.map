{"version":3,"sources":["webpack:///./src/components/tag-item/index.jsx","webpack:///./src/components/tag-list/index.jsx","webpack:///./src/components/post-item/index.jsx","webpack:///./src/components/page-btn/index.jsx","webpack:///./src/template/post-list/index.jsx"],"names":["Tag","tagName","className","TagList","tags","map","index","key","PostListItem","post","id","to","frontmatter","path","title","excerpt","PageBtn","text","PageBtnContainer","nextWhether","pageContext","prev","skip","next","limit","category","Post","filterList","posts","allMarkdownRemark","edges","postList","filter","node","length","includes","visiblePosts","slice"],"mappings":"sHAeeA,G,oBATH,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAEV,0BAAMC,UAAU,OAAhB,KAA4BD,KCQfE,IAXC,SAAC,GAAD,QAAGC,YAAH,MAAU,GAAV,SACd,yBAAKF,UAAU,iBACZE,EAAKC,KAAI,SAACJ,EAASK,GAAV,OACR,kBAAC,EAAD,CAAKC,IAAQN,EAAL,IAAgBK,EAASL,QAASA,U,0JCkBjCO,G,UAlBM,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACnB,yBAAKP,UAAU,oBAAoBK,IAAKE,EAAKC,IAC3C,kBAAC,OAAD,CAAMC,GAAIF,EAAKG,YAAYC,MACzB,yBAAKX,UAAU,kBACb,wBAAIA,UAAU,SACXO,EAAKG,YAAYE,QAGtB,uBAAGZ,UAAU,WAAWO,EAAKM,UAG/B,kBAAC,IAAD,CAASX,KAAMK,EAAKG,YAAYR,UCb9BY,G,UAAU,SAAC,GAAD,IAAGL,EAAH,EAAGA,GAAIM,EAAP,EAAOA,KAAP,OACd,kBAAC,OAAD,CAAMN,GAAIA,EAAIT,UAAW,YACtBe,KAaUC,EAVU,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAH,IAAgBC,YAAqBC,GAArC,EAA+BC,KAA/B,EAAqCD,MAAaE,GAAlD,EAA2CC,MAA3C,EAAkDD,MAAME,EAAxD,EAAwDA,SAAxD,OACvB,yBAAKvB,UAAU,sBACH,KAATmB,EAAc,8BAAU,kBAAC,EAAD,CAASV,GAAE,IAAMc,EAAN,KAA2B,IAATJ,EAAa,GAAKA,GAAQJ,KAAM,WAC5E,KAATM,GAAeJ,EAAc,8BAAU,kBAAC,EAAD,CAASR,GAAE,IAAMc,EAAN,IAAkBF,EAAQN,KAAM,a,UCgExES,UArBF,SAAC,GAAiC,IAA/BN,EAA8B,EAA9BA,YAAaO,EAAiB,EAAjBA,WACrBC,EAjDe,OACbC,kBAyBiBC,MAwBjBR,EAAgBF,EAAhBE,KAAME,EAAUJ,EAAVI,MACRO,EAtBa,SAACH,EAAOD,EAAR,OAAsBF,EAAtB,EAAsBA,SAAtB,OACnBG,EACGI,QAAO,qBAAGC,KAAgBrB,YAAYa,WAAaA,KACnDO,QAAO,YAAe,IAAZC,EAAW,EAAXA,KACT,GAAyB,GAArBN,EAAWO,OACb,OAAO,EAEP,MAAkBP,EAAlB,wDAA8B,CAAC,IAAD,oFAAnBpB,EAAmB,EAC5B,GAAI0B,EAAKrB,YAAYR,MAAQ6B,EAAKrB,YAAYR,KAAK+B,SAAS5B,GAC1D,OAAO,EAIb,OAAO,KAERyB,QAAO,SAAAvB,GACN,OAAOA,EAAKwB,KAAKrB,YAAYE,MAAMoB,OAAS,KAM/BE,CAAaR,EAAOD,EAAYP,GAEjD,OACE,yBAAKlB,UAAU,cAEX6B,EACGM,MAAMf,EAAMA,EAAOE,GACnBnB,KAAI,gBAAG4B,EAAH,EAAGA,KAAH,OAAc,kBAAC,EAAD,CAAU1B,IAAK0B,EAAKvB,GAAID,KAAMwB,OAErD,kBAAC,EAAD,CAAkBd,YAAaG,EAAOS,EAASG,QAAUH,EAASG,QAAUZ,EAAOE,EAAOJ,YAAaA,O","file":"component---src-template-post-list-index-jsx-cb9666b4cd4a3ae1609d.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\n\r\nimport './index.scss'\r\n\r\nconst Tag = ({ tagName }) =>\r\n  // <Link to={`/category/${tagName}`}>\r\n  <span className=\"tag\">{`# ${tagName}`}</span>\r\n// </Link>\r\n\r\nTag.propTypes = {\r\n  tags: PropTypes.string,\r\n}\r\n\r\nexport default Tag;","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport Tag from 'component/tag-item'\r\n\r\nconst TagList = ({ tags = [] }) =>\r\n  <div className=\"tag-container\">\r\n    {tags.map((tagName, index) =>\r\n      <Tag key={`${tagName}_${index}`} tagName={tagName} />\r\n    )}\r\n  </div>\r\n\r\nTagList.propTypes = {\r\n  tags: PropTypes.array,\r\n}\r\n\r\nexport default TagList;","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\n\r\nimport TagList from 'component/tag-list'\r\n\r\nimport './index.scss'\r\n\r\nconst PostListItem = ({ post }) =>\r\n  <div className=\"blog-post-preview\" key={post.id}>\r\n    <Link to={post.frontmatter.path}>\r\n      <div className=\"blog-container\">\r\n        <h1 className=\"title\">\r\n          {post.frontmatter.title}\r\n        </h1>\r\n      </div>\r\n      <p className=\"summary\">{post.excerpt}</p>\r\n    </Link >\r\n\r\n    <TagList tags={post.frontmatter.tags} />\r\n  </div >\r\n\r\nPostListItem.propTypes = {\r\n  post: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default PostListItem;","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\n\r\nimport './index.scss'\r\n\r\nconst PageBtn = ({ to, text }) =>\r\n  <Link to={to} className={'page-btn'}>\r\n    {text}\r\n  </Link>\r\n\r\nconst PageBtnContainer = ({ nextWhether, pageContext: { skip, prev, limit, next, category } }) =>\r\n  <div className=\"page-btn-container\">\r\n    {prev === '' ? <div /> : <PageBtn to={`/${category}/${prev === 0 ? '' : prev}`} text={'← Prev'} />}\r\n    {next === '' || nextWhether ? <div /> : <PageBtn to={`/${category}/${next}`} text={'Next →'} />}\r\n  </div>\r\n\r\nPageBtnContainer.propTypes = {\r\n  pageContext: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default PageBtnContainer","import React, { useState } from 'react'\r\nimport { graphql, useStaticQuery } from 'gatsby'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport PostItem from 'component/post-item'\r\nimport PageBtnContainer from 'component/page-btn'\r\n\r\nimport './index.scss'\r\n\r\nconst usePosts = () => {\r\n  const { allMarkdownRemark } = useStaticQuery(\r\n    graphql`\r\n      query Posts($category: String) {\r\n        allMarkdownRemark(\r\n          sort: {fields: [frontmatter___date], order: DESC }\r\n          filter: {frontmatter: {category: {eq: $category } } }\r\n        ) {\r\n          edges {\r\n            node {\r\n              excerpt\r\n              id\r\n              frontmatter {\r\n                title\r\n                date(formatString: \"YYYY/MM/DD\")\r\n                path\r\n                tags\r\n                category\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  return allMarkdownRemark.edges\r\n}\r\n\r\nconst visiblePosts = (posts, filterList, { category }) =>\r\n  posts\r\n    .filter(({ node }) => node.frontmatter.category === category)\r\n    .filter(({ node }) => {\r\n      if (filterList.length == 0) {\r\n        return true\r\n      } else {\r\n        for (const key of filterList) {\r\n          if (node.frontmatter.tags && node.frontmatter.tags.includes(key)) {\r\n            return true\r\n          }\r\n        }\r\n      }\r\n      return false\r\n    })\r\n    .filter(post => {\r\n      return post.node.frontmatter.title.length > 0\r\n    })\r\n\r\nconst Post = ({ pageContext, filterList }) => {\r\n  const posts = usePosts()\r\n  const { skip, limit } = pageContext\r\n  const postList = visiblePosts(posts, filterList, pageContext)\r\n\r\n  return (\r\n    <div className=\"blog-posts\">\r\n      {\r\n        postList\r\n          .slice(skip, skip + limit)\r\n          .map(({ node }) => <PostItem key={node.id} post={node} />)\r\n      }\r\n      <PageBtnContainer nextWhether={skip < postList.length && postList.length <= skip + limit} pageContext={pageContext} />\r\n    </div>\r\n  )\r\n}\r\n\r\nPost.propTypes = {\r\n  pageContext: PropTypes.object,\r\n}\r\n\r\nexport default Post"],"sourceRoot":""}